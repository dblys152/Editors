<div class="content">
	<div class="form-group">
		<input type="text" class="form-control" name="pstTtl" value="" placeholder="제목을 입력하세요." style="width:100%"/>
	</div>
	<div class="form-group">
		<textarea name="pstCntn" id="edit_contents" style="width:100%;height:500px"></textarea>
	</div>
	<div class="form-group">
		<button type="button" class="btn btn-secondary edit_on btn_edit" value="tiny">Tiny-Editor</button>
		<button type="button" class="btn btn-outline-secondary btn_edit" value="smart">Smart-Editor</button>
		<div class="float-right">
			<button type="button" class="btn btn-success" data-toggle="modal" data-target="#postPop">등록</button>
			<a href="/" class="btn btn-outline-secondary">취소</a>
		</div>
	</div>

	<div class="modal" id="postPop">
		<div class="modal-dialog">
		  	<div class="modal-content">
				<form id="postForm">
				<!-- Modal body -->
				<div class="modal-body">
					<div class="form-group row">
						<label class="col-sm-3 col-form-label">카테고리</label>
						<div class="col-sm-9">
							<select class="form-control" name="tpcCtgNo">
								<option value="99">선택안함</option>
								<option value="10">여행</option>
							</select>	
						</div>
					</div>
					<div class="form-group row">
						<label class="col-sm-3 col-form-label">공개 설정</label>
						<div class="col-sm-9">
							<div class="form-check form-check-inline">
								<input class="form-check-input" type="radio" name="pstDispCd" value="106101" checked>
  								<label class="form-check-label">전체공개</label>
							</div>
							<div class="form-check form-check-inline">
								<input class="form-check-input" type="radio" name="pstDispCd" value="106102">
  								<label class="form-check-label">이웃공개</label>
							</div>
							<div class="form-check form-check-inline">
								<input class="form-check-input" type="radio" name="pstDispCd" value="106103">
  								<label class="form-check-label">비공개</label>
							</div>
						</div>
					</div>
					<div class="form-group row">
						<label class="col-sm-3 col-form-label">발행 설정</label>
						<div class="col-sm-9">
							<div class="form-check form-check-inline">
								<input class="form-check-input" type="checkbox" name="cmntYn" checked>
  								<label class="form-check-label">댓글허용</label>
							</div>
							<div class="form-check form-check-inline">
								<input class="form-check-input" type="checkbox" name="rcmYn" checked>
  								<label class="form-check-label">공감허용</label>
							</div>	
						</div>
					</div>
					<div class="form-group row">
						<label class="col-sm-3 col-form-label">태그 설정</label>
						<div class="col-sm-9">
							<input type="text" data-role="tagsinput">
							<!-- <textarea class="form-control" name="tagNm" rows="3"></textarea> -->
						</div>
					</div>
					<div class="form-group row">
						<label class="col-sm-3 col-form-label">발행 시간</label>
						<div class="col-sm-9">
							<div class="form-check form-check-inline">
								<input class="form-check-input" type="radio" name="timeRadio" value="1" checked>
  								<label class="form-check-label">현재</label>
							</div>
							<div class="form-check form-check-inline">
								<input class="form-check-input" type="radio" name="timeRadio" value="2">
  								<label class="form-check-label">예약</label>
							</div>
							<small id="emailHelp" class="form-text text-muted post_rsrv" hidden>선택한 시간으로 예약 게시됩니다.</small>
							<div class="form-row post_rsrv" hidden>
								<div class="col-6">
									<input type="text" class="form-control datePicker" name="postDate">
								</div>
								<div class="col">
									<select class="form-control" name="postHour">
										<% for(let i = 0; i < 24; i++) { %>
										<option value="<%= (i < 10 ? '0' + i : i) %>"><%= (i < 10 ? '0' + i : i) %></option>
										<% } %>
									</select>
								</div>
								<div>:</div>
								<div class="col">
									<select class="form-control" name="postMinute">
										<% for(let i = 0; i < 6; i++) { %>
										<option value="<%= i + '0' %>"><%= i + '0' %></option>
										<% } %>
									</select>
								</div>
							</div>
						</div>	
					</div>
				</div>
				<!-- Modal footer -->
				<div class="modal-footer justify-content-between">                    
					<div class="form-check form-check-inline">
						<input class="form-check-input" type="checkbox" name="topPstYn">
						<label class="form-check-label">공지사항으로 등록</label>
					</div>                                    
					<div>
						<button type="button" class="btn btn-success" id="postSave">등록</button>
						<button type="button" class="btn btn-outline-secondary" data-dismiss="modal">닫기</button>
					</div>  
				</div>
				</form>
			</div>
		</div>
	</div>
</div>
<script type="text/javascript" src="/tinymce/tinymce.min.js"></script>
<script type="text/javascript" src="/smartEditor2/js/service/HuskyEZCreator.js" charset="utf-8"></script>
<script type="text/javascript" src="/javascripts/datePicker.js" charset="utf-8"></script>
<script type="text/javascript" src="/bootstrap4/tagsinput.js" charset="utf-8"></script>
<link rel="stylesheet" type="text/css" href="/bootstrap4/tagsinput.css">
<script>
window.addEventListener('DOMContentLoaded', () => {
	fn_tinyEditorLoad();	// Tiny Editor 로드

	// 에디터 변경
	let btnEdits = document.getElementsByClassName('btn_edit');
	for(let i = 0; i < btnEdits.length; i++) {
		btnEdits[i].addEventListener('click', (e) => {
			let thisVal = e.currentTarget.value;
			if(thisVal != document.querySelector('.btn-secondary.edit_on').value) {
				switch(thisVal) {
					case 'tiny': 
							let editTa = document.getElementById('edit_contents');
							editTa.style.display = 'block';
							editTa.value = oEditors.getById["edit_contents"].getIR();
							fn_smartEditorRemove(); //Smart Editor2 제거
							fn_tinyEditorLoad();	//Tiny Editor 로드
							break;
					case 'smart': 
							tinymce.remove();		//Tiny Editor 제거
							fn_smartEditorLoad(); 	//Smart Editor2 로드
							break;
					default: break;
				}

				let btnEdits2 = document.getElementsByClassName('btn_edit');
				for(let j = 0; j < btnEdits2.length; j++) {
					btnEdits2[j].classList.add('btn-outline-secondary');
					btnEdits2[j].classList.remove('btn-secondary', 'edit_on');
				}
				btnEdits[i].classList.add('btn-secondary', 'edit_on');
				btnEdits[i].classList.remove('btn-outline-secondary');
			}
		});
	}

	// 등록 팝업 발행시간 라디오 변경
	let timeRadios = document.querySelectorAll('#postPop input[name="timeRadio"]');
	for(let i = 0; i < timeRadios.length; i++) {
		timeRadios[i].addEventListener('change', (e) => {
			let thisVal = e.currentTarget.value,
				rsrvInps = document.getElementsByClassName('post_rsrv');
			for(let i = 0; i < rsrvInps.length; i++) {
				if(thisVal == '2') {
					rsrvInps[i].hidden = false;
				} else {
					rsrvInps[i].hidden = true;
				}
			}
		});
	}

	// 팝업 게시글 등록 버튼 클릭
	document.getElementById('postSave').addEventListener('click', () => {
		let pstTtlInp = document.querySelector('input[name="pstTtl"]'),
			pstCntn = '',
			edit = document.querySelector('.btn-secondary.edit_on').value;
		if(edit == 'tiny') {
			pstCntn = tinyMCE.activeEditor.getContent();
		} else if(edit == 'smart') {
			pstCntn = oEditors.getById["edit_contents"].getIR();
		}
		
		if(pstTtlInp.value == '') {
			alert('제목을 입력해주세요.');
			pstTtlInp.focus();
		} else if(pstCntn == '') {
			alert('게시글을 입력해주세요.');
		} else {
			let form = document.forms["postForm"];
			let timeRadioVal = form[fname="timeRadio"].value,
				postDate = form[fname="postDate"].value,
				postHour = form[fname="postHour"].value,
				postMinute = form[fname="postMinute"].value;
			if(timeRadioVal == '2' && postDate == '') {
				alert('예약 날짜를 입력해주세요.');
				form[fname="postDate"].focus();
			} else if(confirm('게시글을 등록 하시겠습니까?')) {
				let tags = document.getElementsByClassName('badge'),
					tagNm = '';
				for(let i = 0; i < tags.length; i++) {
					tagNm += tags[i].innerText.trim() + ',';
				}
				tagNm = tagNm.substring(0, tagNm.length-1);

				let dataForm = {
					"pstTtl": pstTtlInp.value
				  , "pstCntn": pstCntn
				  , "tpcCtgNo": form[fname="tpcCtgNo"].value
				  , "pstDispCd": form[fname="pstDispCd"].value
				  , "cmntYn": (form[fname="cmntYn"].checked == true ? 'Y' : 'N')
				  , "rcmYn": (form[fname="rcmYn"].checked == true ? 'Y' : 'N')
				  , "tagNm": tagNm
				  , "pstStDtt": (timeRadioVal != '2' ? null : postDate + ' ' + postHour + ':' + postMinute + ':00')
				  , "topPstYn": (form[fname="topPstYn"].checked == true ? 'Y' : 'N')
				};
				fn_postSave(dataForm);
			}
		}
	});

});

/* Tiny Editor 로드 */
function fn_tinyEditorLoad() {
	tinymce.init({
		selector: "#edit_contents",
		//theme: "modern",
		language_url: '/tinymce/langs/ko_KR.js',
		menubar:false,
		//height: 600,
		autoresize_min_height: 500,
		plugins: "autolink autosave code link media image table textcolor autoresize paste",
		toolbar: "undo redo | fontselect | fontsizeselect | bold underline italic forecolor backcolor | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | table link media image code",
		automatic_uploads: true,
		file_picker_types: 'image',
		images_upload_url: '/file/edit-img/tiny',	//이미지 업로드 url
		image_title: true,
		paste_data_images: true,
		//image_dimensions: false,
		relative_urls: false,
		//remove_script_host: false,
		setup: function (editor) {
			editor.on('init', function(args) {
				editor = args.target;
				editor.on('NodeChange', function(e) {
					if (e && e.element.nodeName.toLowerCase() == 'img') {	//이미지 사이즈 자동 조정
						width = e.element.width;
						height = e.element.height;
						if (width > 1000) {
							height = height / (width / 1000);
							width = 1000;
						}
						tinyMCE.DOM.setAttribs(e.element, {'width': width, 'height': height});
					}
				});
			});	
		},
		file_picker_callback: function(cb, value, meta) {
			let input = document.createElement('input');
			input.setAttribute('type', 'file');
			input.setAttribute('accept', 'image/*');
			input.onchange = function() {
				let file = this.files[0];
				let reader = new FileReader();
				reader.onload = function () {
					let id = 'blobid' + (new Date()).getTime();
					let blobCache =  tinymce.activeEditor.editorUpload.blobCache;
					let base64 = reader.result.split(',')[1];
					let blobInfo = blobCache.create(id, file, base64);
					blobCache.add(blobInfo);
					cb(blobInfo.blobUri(), { title: file.name });
				};
				reader.readAsDataURL(file);
			};
			input.click();
		}
	});
};

/* Smart Editor 로드 */
let oEditors = [];
function fn_smartEditorLoad() {
	nhn.husky.EZCreator.createInIFrame({
		oAppRef: oEditors,
		elPlaceHolder: "edit_contents",
		sSkinURI: "/smartEditor2/SmartEditor2Skin.html",
		fCreator: "createSEditor2",
		htParams : { 
			bUseToolbar : true
		  , bUseVerticalResizer : true
		  , bUseModeChanger : true
		}
	});
}

/* Smart Editor 제거 */
function fn_smartEditorRemove() {
	let iframes = document.querySelectorAll('iframe');
	for (let i = 0; i < iframes.length; i++) {
		iframes[i].parentNode.removeChild(iframes[i]);
	}
}

/* 게시글 등록 함수 */
function fn_postSave(dataForm) {
	let edit = document.querySelector('.btn-secondary.edit_on').value;
	//양식 제출 전 실행
	if(edit == 'tiny') {
		tinymce.triggerSave();	
	} else if(edit == 'smart') {
		oEditors.getById["edit_contents"].exec("UPDATE_CONTENTS_FIELD", []);
	}

	fetch('/post', {
        method: 'POST'
      , body: JSON.stringify(dataForm)
	  , headers: {"Content-Type": "application/json"}
    }).then(res => {
		if(!res.ok) throw res.statusText;
		return res.json();
	}).then(json => { 
		alert('게시글이 등록되었습니다.');
		location.replace('/view/' + json.pstNo);    
    }).catch(error => {
		alert('게시글 등록 실패하였습니다.');
        console.log(error);
    });
};
</script>